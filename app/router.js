// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['jquery', 'underscore', 'backbone', 'cs!models/condition', 'cs!views/index', 'cs!views/condition'], function($, _, Backbone, aneurysm, IndexView, ConditionView) {
    /*
      Backbone navigation router class. Handles url change events
    
      - `routes` - dictionary-like object with route[String]:handler[String] structure
    */

    var Router;
    Router = (function(_super) {

      __extends(Router, _super);

      function Router() {
        return Router.__super__.constructor.apply(this, arguments);
      }

      Router.prototype.routes = {
        '': 'index',
        'slug(/)': 'condition',
        '*actions': 'index'
      };

      /*
          Router initialization. Defines needed variables: `commonView`, `playerView`, `indexView`, `addToPlaylistView`.
      
          Resets all routes. Starts Backbone.history.
      */


      Router.prototype.initialize = function(options) {
        this.autoResetRoutes();
        return Backbone.history.start({
          pushState: false
        });
      };

      Router.prototype.autoResetRoutes = function() {
        var _this = this;
        return _(this.routes).each(function(destination) {
          return _(_this.routes).each(function(other) {
            if (destination !== other) {
              return _this.on("route:" + destination, _this["reset_" + other], _this);
            }
          });
        });
      };

      Router.prototype.index = function() {
        this.indexView = new IndexView;
        return $('body').append(this.indexView.render().el);
      };

      Router.prototype.reset_index = function() {
        /* Hide index here
        */

        var _ref;
        return (_ref = this.indexView) != null ? _ref.remove() : void 0;
      };

      Router.prototype.condition = function() {
        this.conditionView = new ConditionView({
          model: aneurysm
        });
        $('body').append(this.conditionView.render().el);
        if (!aneurysm.get('name')) {
          return aneurysm.fetch();
        }
      };

      Router.prototype.reset_condition = function() {
        var _ref;
        return (_ref = this.conditionView) != null ? _ref.remove() : void 0;
      };

      return Router;

    })(Backbone.Router);
    return new Router;
  });

}).call(this);
