// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(['jquery', 'underscore', 'backbone', 'text!templates/condition.html', 'text!templates/treatment.html'], function($, _, Backbone, template, treatTemplate) {
    var ConditionView, TreatmentView, TreatmentsView;
    TreatmentView = (function(_super) {

      __extends(TreatmentView, _super);

      function TreatmentView() {
        return TreatmentView.__super__.constructor.apply(this, arguments);
      }

      TreatmentView.prototype.tagName = 'li';

      TreatmentView.prototype.template = _.template(treatTemplate);

      TreatmentView.prototype.render = function() {
        this.$el.html(this.template(this.model));
        return this;
      };

      return TreatmentView;

    })(Backbone.View);
    TreatmentsView = (function(_super) {

      __extends(TreatmentsView, _super);

      function TreatmentsView() {
        this.addOne = __bind(this.addOne, this);
        return TreatmentsView.__super__.constructor.apply(this, arguments);
      }

      TreatmentsView.prototype.tagName = 'ul';

      TreatmentsView.prototype.render = function() {
        this.$el.empty();
        _.each(this.model.get('treatments'), this.addOne);
        return this;
      };

      TreatmentsView.prototype.addOne = function(treat) {
        return this.$el.append(new TreatmentView({
          model: treat
        }).render().el);
      };

      return TreatmentsView;

    })(Backbone.View);
    return ConditionView = (function(_super) {

      __extends(ConditionView, _super);

      function ConditionView() {
        return ConditionView.__super__.constructor.apply(this, arguments);
      }

      ConditionView.prototype.template = _.template(template);

      ConditionView.prototype.initialize = function(options) {
        ConditionView.__super__.initialize.call(this, options);
        return this.listenTo(this.model, 'change:name', this.render);
      };

      ConditionView.prototype.render = function() {
        document.title = this.model.get('name');
        this.$el.html(this.template(this.model.attributes));
        this.$('div').append(new TreatmentsView({
          model: this.model
        }).render().el);
        return this;
      };

      return ConditionView;

    })(Backbone.View);
  });

}).call(this);
